from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.types import InputMedia, InputMediaPhoto, InputMediaVideo, Document
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

bot = Bot(token='API-token', parse_mode='HTML')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
TELEGRAM_SUPPORT_CHAT_ID = "TELEGRAM_SUPPORT_CHAT_ID"
PHOTOS_ID = []
photo_delivered: set[int] = set()


@dp.message_handler(commands=['start'])
async def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1, one_time_keyboard=True)
    join = types.KeyboardButton('/help')
    markup.add(join)
    mess = f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} üëã \n–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ \n–ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É –∏–ª–∏ –∂–µ –Ω–∞–ø–∏—à–∏ –º–Ω–µ "/help" '
    await bot.send_message(message.chat.id, mess, reply_markup=markup)


class Form(StatesGroup):
    email = State()
    ask = State()


@dp.message_handler(commands=['help'], state=None)
async def start(message: types.Message):
    await Form.email.set()
    await bot.send_message(message.chat.id,
                           f'{message.from_user.first_name}, –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏ –º–Ω–µ c–≤–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å üì•')


@dp.message_handler(state=Form.email)
async def get_email(message: types.Message, state: FSMContext):
    answer = message.text
    async with state.proxy() as data:
        data["email"] = answer
    await Form.ask.set()
    await bot.send_message(message.chat.id,
                           f'{message.from_user.first_name}, –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!'
                           f'\n\n<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è</b>:\n'
                           f'1. –û—Ç–ø—Ä–∞–≤—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏ –≤–æ–ø—Ä–æ—Å.\n'
                           f'2. –ï—Å–ª–∏ —É —Ç–µ–±—è —Ñ–æ—Ç–æ, —Ç–æ –ø–æ—Å—Ç–∞–≤—å –≥–∞–ª–æ—á–∫—É –Ω–∞ "–°–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" ü•∞')


@dp.message_handler(state=Form.ask)
async def process_name(message: types.Message, state: FSMContext):
    data = await state.get_data()
    email = data.get("email")
    mess = f'–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–±–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è!\n–ê –ø–æ–∫–∞ –∂–¥–µ—à—å, –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –∏ –Ω–µ —Ç–æ–ª—å–∫–æ –≤ –º–æ–µ–º –∫–∞–Ω–∞–ª–µ ‚ù§'
    markup = types.InlineKeyboardMarkup(resize_keyboard=True, row_width=1, one_time_keyboard=True)
    channel_btn = types.InlineKeyboardButton('–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ', url='https://t.me/webdesign_uiux')
    markup.add(channel_btn)
    await state.finish()
    await bot.send_message(TELEGRAM_SUPPORT_CHAT_ID, f'E-mail: {email}\n'
                                                     f'first name: {message.from_user.first_name}\n'
                                                     f'last name: {message.from_user.last_name}\n'
                                                     f'username: @{message.from_user.username}\n'
                                                     f'USER_CHAT_ID: {message.chat.id}\n'
                                                     f'<b>–í–æ–ø—Ä–æ—Å: {message.text}</b>\n')
    await bot.send_message(message.chat.id, mess, reply_markup=markup)


async def say_thanks(user: types.User):
    mess = f'–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–±–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è!\n–ê –ø–æ–∫–∞ –∂–¥–µ—à—å, –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –∏ –Ω–µ —Ç–æ–ª—å–∫–æ –≤ –º–æ–µ–º –∫–∞–Ω–∞–ª–µ ‚ù§'
    if user.id in photo_delivered:
        return
    photo_delivered.add(user.id)
    markup = types.InlineKeyboardMarkup(resize_keyboard=True, row_width=1, one_time_keyboard=True)
    channel_btn = types.InlineKeyboardButton('–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ', url='https://t.me/webdesign_uiux')
    markup.add(channel_btn)
    await bot.send_message(user.id, mess, reply_markup=markup)


@dp.message_handler(state=Form.ask, content_types=['photo'])
async def forward_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    email = data.get("email")
    await say_thanks(message.from_user)
    photo = message.photo[-1].file_id
    media = [InputMediaPhoto(photo, caption=f'E-mail: {email}\n'
                                            f'first name: {message.from_user.first_name}\n'
                                            f'last name: {message.from_user.last_name}\n'
                                            f'username: @{message.from_user.username}\n'
                                            f'USER_CHAT_ID: {message.chat.id}\n'
                                            f'<b>–í–æ–ø—Ä–æ—Å: {message.caption}</b>')]
    await bot.send_media_group(TELEGRAM_SUPPORT_CHAT_ID, media=media)  # media=media
    await state.finish()


@dp.message_handler(state=Form.ask, content_types=['video'])
async def forward_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    email = data.get("email")
    await say_thanks(message.from_user)
    video = message.video.file_id
    await bot.send_video(TELEGRAM_SUPPORT_CHAT_ID, video=video, caption=f'E-mail: {email}\n'
                                                                        f'first name: {message.from_user.first_name}\n'
                                                                        f'last name: {message.from_user.last_name}\n'
                                                                        f'username: @{message.from_user.username}\n'
                                                                        f'USER_CHAT_ID: {message.chat.id}\n'
                                                                        f'<b>–í–æ–ø—Ä–æ—Å: {message.caption}</b>')
    await state.finish()


@dp.message_handler()
async def answer_the_ask(message: types.Message, state: FSMContext):
    if message.chat.id == TELEGRAM_SUPPORT_CHAT_ID:
        if message.reply_to_message:
            try:
                await message.reply_to_message.reply("–í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç!")
                answer = message.text
                user_info = message.reply_to_message.text
                USER = user_info.split('\n')
                for line in USER:
                    if line.startswith('USER_CHAT_ID: '):
                        USER_CHAT_ID = line.lstrip('USER_CHAT_ID: ')
                        await bot.send_message(USER_CHAT_ID, answer)
            except:
                answer = message.text
                user_info = message.reply_to_message.caption
                USER = user_info.split('\n')
                for line in USER:
                    if line.startswith('USER_CHAT_ID: '):
                        USER_CHAT_ID = line.lstrip('USER_CHAT_ID: ')
                        await bot.send_message(USER_CHAT_ID, answer)
    elif message.text == "–°–ø–∞—Å–∏–±–æ" or message.text == "Thanks" or message.text.startswith(
            "C–ø–∞c") or message.text == '–î—è–∫—É—î–º–æ':
        mess = f'{message.from_user.first_name}, –≤—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!'
        await bot.send_message(message.chat.id, mess)
    else:
        mess = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏'
        await bot.send_message(message.chat.id, mess)


@dp.message_handler(content_types=['photo'])
async def answer_the_photo(message: types.Message, state: FSMContext):
    if message.chat.id == TELEGRAM_SUPPORT_CHAT_ID:
        if message.reply_to_message:
            try:
                await message.reply_to_message.reply("–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                answer = message.photo[-1].file_id
                answer_text = message.caption
                user_info = message.reply_to_message.caption
                USER = user_info.split('\n')
                for line in USER:
                    if line.startswith('USER_CHAT_ID: '):
                        USER_CHAT_ID = line.lstrip('USER_CHAT_ID: ')
                        await bot.send_photo(USER_CHAT_ID, answer)
                        await bot.send_message(USER_CHAT_ID, answer_text)
            except:
                await message.reply_to_message.reply("–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                answer = message.photo[-1].file_id
                answer_text = message.caption
                user_info = message.reply_to_message.text
                USER = user_info.split('\n')
                for line in USER:
                    if line.startswith('USER_CHAT_ID: '):
                        USER_CHAT_ID = line.lstrip('USER_CHAT_ID: ')
                        await bot.send_photo(USER_CHAT_ID, answer)
                        await bot.send_message(USER_CHAT_ID, answer_text)


@dp.message_handler(content_types=['video'])
async def answer_the_photo(message: types.Message, state: FSMContext):
    if message.chat.id == TELEGRAM_SUPPORT_CHAT_ID:
        if message.reply_to_message:
            await message.reply_to_message.reply("–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            answer = message.video.file_id
            answer_text = message.caption
            user_info = message.reply_to_message.caption
            USER = user_info.split('\n')
            for line in USER:
                if line.startswith('USER_CHAT_ID: '):
                    USER_CHAT_ID = line.lstrip('USER_CHAT_ID: ')
                    await bot.send_video(USER_CHAT_ID, answer)
                    await bot.send_message(USER_CHAT_ID, answer_text)


executor.start_polling(dp, skip_updates=True)
